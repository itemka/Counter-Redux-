{"ast":null,"code":"import _objectSpread from \"/Users/itemka/Developer/Projects/Counter/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/itemka/Developer/Projects/Counter/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport Button from \"./Components/Button/Button\";\nimport ShowNumber from \"./Components/ShowNumber/ShowNumber\";\nimport InputValue from \"./Components/InputValue/InputValue\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      counter: 0,\n      buttons: [{\n        id: 1,\n        buttonsTitle: '+',\n        access: true\n      }, {\n        id: 2,\n        buttonsTitle: 'Reset',\n        access: true\n      }, {\n        id: 3,\n        buttonsTitle: 'Set',\n        access: false\n      }],\n      limit: {\n        startValue: 0,\n        maxValue: 5,\n        errorColorStart: false,\n        errorColorMax: false,\n        errorEnd: false,\n        errorEndText: 'Stop'\n      },\n      message: 0\n    };\n\n    this.onClickPlusNumber = () => {\n      if (this.state.counter < this.state.limit.maxValue) {\n        this.setState({\n          counter: this.state.counter + 1,\n          limit: _objectSpread({}, this.state.limit, {\n            errorColorStart: false,\n            errorColorMax: false,\n            errorEnd: false\n          })\n        });\n      } else {\n        this.setState({\n          limit: _objectSpread({}, this.state.limit, {\n            errorEnd: true\n          })\n        });\n      }\n    };\n\n    this.onClickReset = () => {\n      this.setState({\n        counter: this.state.limit.startValue,\n        limit: _objectSpread({}, this.state.limit, {\n          errorEnd: false\n        })\n      });\n    };\n\n    this.accessButtons = (id, access) => {\n      let copyButtons = this.state.buttons.map(item => {\n        if (item.id === 3) {\n          item.access = access;\n          return item;\n        } else {\n          item.access = !access;\n          return item;\n        }\n      });\n      return copyButtons;\n    };\n\n    this.onClickSet = () => {\n      this.setState({\n        counter: this.state.limit.startValue,\n        buttons: this.accessButtons(3, false)\n      });\n    };\n\n    this.onChangeInputMaxValue = event => {\n      if (event > this.state.limit.startValue) {\n        this.setState({\n          buttons: this.accessButtons(3, true),\n          limit: _objectSpread({}, this.state.limit, {\n            maxValue: event,\n            errorColorMax: false\n          })\n        });\n      } else {\n        this.setState({\n          buttons: this.accessButtons(3, true),\n          limit: _objectSpread({}, this.state.limit, {\n            maxValue: event,\n            errorColorMax: true\n          })\n        });\n      }\n    };\n\n    this.onChangeInputStartValue = event => {\n      if (event >= 0 && event < this.state.limit.maxValue) {\n        this.setState({\n          buttons: this.accessButtons(3, true),\n          limit: _objectSpread({}, this.state.limit, {\n            startValue: event,\n            errorColorStart: false\n          })\n        });\n      } else if (event < 0 || event >= this.state.limit.maxValue) {\n        this.setState({\n          buttons: this.accessButtons(3, true),\n          limit: _objectSpread({}, this.state.limit, {\n            startValue: event,\n            errorColorStart: true\n          })\n        });\n      }\n    };\n\n    this.render = () => {\n      return React.createElement(\"div\", {\n        className: \"generalBlock\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"bloks\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"contentLine\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \"Max value\"), React.createElement(InputValue, {\n        errorColor: this.state.limit.errorColorMax,\n        value: this.state.limit.maxValue,\n        onChangeInput: this.onChangeInputMaxValue.bind(this.state),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"contentLine\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \"Start value\"), React.createElement(InputValue, {\n        errorColor: this.state.limit.errorColorStart,\n        value: this.state.limit.startValue,\n        onChangeInput: this.onChangeInputStartValue.bind(this.state),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"interfaceManagement\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClickButton: this.onClickSet.bind(this.state),\n        buttonsTitle: this.state.buttons[2].buttonsTitle,\n        access: this.state.buttons[2].access,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      })))), React.createElement(\"div\", {\n        className: \"bloks\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(ShowNumber, {\n        limit: this.state.limit,\n        counter: this.state.counter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"interfaceManagement\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClickButton: this.onClickPlusNumber.bind(this.state),\n        buttonsTitle: this.state.buttons[0].buttonsTitle,\n        access: this.state.buttons[0].access,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }), React.createElement(Button, {\n        onClickButton: this.onClickReset.bind(this.state),\n        buttonsTitle: this.state.buttons[1].buttonsTitle,\n        access: this.state.buttons[1].access,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      })))));\n    };\n  }\n\n}\n\nexport default App; // Побаловался\n// limit: {number: 0, T: 3, B: -3, error: 'Stop'}\n// onClickButton = isDone => {\n//     if (isDone) {\n//         this.state.number = this.state.limit.number;\n//\n//         if (this.state.limit.number < this.state.limit.T) {\n//             this.setState({number: this.state.number + 1});\n//             this.state.limit.number = this.state.limit.number + 1;\n//             console.log(this.state.limit.number);\n//         } else {\n//             this.setState({number: this.state.limit.error});\n//         }\n//     } else if (!isDone) {\n//         this.state.number = this.state.limit.number;\n//\n//         if (this.state.limit.number > this.state.limit.B) {\n//             this.setState({number: this.state.number - 1});\n//             this.state.limit.number = this.state.limit.number - 1;\n//             console.log(this.state.limit.number);\n//         } else {\n//             this.setState({number: this.state.limit.error});\n//         }\n//     }\n// };","map":{"version":3,"sources":["/Users/itemka/Developer/Projects/Counter/src/App.js"],"names":["React","Button","ShowNumber","InputValue","App","Component","state","counter","buttons","id","buttonsTitle","access","limit","startValue","maxValue","errorColorStart","errorColorMax","errorEnd","errorEndText","message","onClickPlusNumber","setState","onClickReset","accessButtons","copyButtons","map","item","onClickSet","onChangeInputMaxValue","event","onChangeInputStartValue","render","bind"],"mappings":"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","sourcesContent":["import React from 'react'\nimport './App.css';\nimport Button from \"./Components/Button/Button\";\nimport ShowNumber from \"./Components/ShowNumber/ShowNumber\";\nimport InputValue from \"./Components/InputValue/InputValue\";\n\nclass App extends React.Component {\n\n    state = {\n        counter: 0,\n        buttons: [\n            {id: 1, buttonsTitle: '+', access: true},\n            {id: 2, buttonsTitle: 'Reset', access: true},\n            {id: 3, buttonsTitle: 'Set', access: false},\n        ],\n        limit: {\n            startValue: 0, maxValue: 5,\n            errorColorStart: false, errorColorMax: false,\n            errorEnd: false,\n            errorEndText: 'Stop'\n        },\n        message: 0,\n    };\n\n\n    onClickPlusNumber = () => {\n        if (this.state.counter < this.state.limit.maxValue) {\n            this.setState({\n                counter: this.state.counter + 1,\n                limit: {...this.state.limit, errorColorStart: false, errorColorMax: false, errorEnd: false}\n            });\n        } else {\n            this.setState({limit: {...this.state.limit, errorEnd: true}})\n        }\n    };\n\n    onClickReset = () => {\n        this.setState({counter: this.state.limit.startValue, limit: {...this.state.limit, errorEnd: false}})\n    };\n\n\n    accessButtons = (id, access) => {\n        let copyButtons = this.state.buttons.map(item => {\n            if (item.id === 3) {\n                item.access = access;\n                return item;\n            } else {\n                item.access = !access;\n                return item;\n            }\n        });\n        return copyButtons;\n    };\n    onClickSet = () => {\n        this.setState({\n            counter: this.state.limit.startValue,\n            buttons: this.accessButtons(3, false)\n        });\n    };\n\n\n    onChangeInputMaxValue = (event) => {\n        if (event > this.state.limit.startValue) {\n            this.setState({\n                buttons: this.accessButtons(3, true),\n                limit: {...this.state.limit, maxValue: event, errorColorMax: false}\n            });\n        } else {\n            this.setState({\n                buttons: this.accessButtons(3, true),\n                limit: {...this.state.limit, maxValue: event, errorColorMax: true}\n            });\n        }\n    };\n\n    onChangeInputStartValue = (event) => {\n        if ((event >= 0) && (event < this.state.limit.maxValue)) {\n            this.setState({\n                buttons: this.accessButtons(3, true),\n                limit: {...this.state.limit, startValue: event, errorColorStart: false}\n            });\n        } else if ((event < 0) || (event >= this.state.limit.maxValue)) {\n            this.setState({\n                buttons: this.accessButtons(3, true),\n                limit: {...this.state.limit, startValue: event, errorColorStart: true}\n            });\n        }\n    };\n\n\n    render = () => {\n        return (\n            <div className={`generalBlock`}>\n                <div className={`bloks`}>\n                    <div>\n                        <div className={`content`}>\n                            <div className={`contentLine`}>\n                                <div>Max value</div>\n                                <InputValue errorColor={this.state.limit.errorColorMax}\n                                            value={this.state.limit.maxValue}\n                                            onChangeInput={this.onChangeInputMaxValue.bind(this.state)}/>\n                            </div>\n                            <div className={`contentLine`}>\n                                <div>Start value</div>\n                                <InputValue errorColor={this.state.limit.errorColorStart}\n                                            value={this.state.limit.startValue}\n                                            onChangeInput={this.onChangeInputStartValue.bind(this.state)}/>\n                            </div>\n                        </div>\n                        <div className={`interfaceManagement`}>\n                            <Button onClickButton={this.onClickSet.bind(this.state)}\n                                    buttonsTitle={this.state.buttons[2].buttonsTitle}\n                                    access={this.state.buttons[2].access}/>\n                        </div>\n                    </div>\n                </div>\n                <div className={`bloks`}>\n                    <div>\n                        <div className={`content`}>\n                            <div>\n                                <ShowNumber limit={this.state.limit} counter={this.state.counter}/>\n                            </div>\n                        </div>\n                        <div className={`interfaceManagement`}>\n                            <Button onClickButton={this.onClickPlusNumber.bind(this.state)}\n                                    buttonsTitle={this.state.buttons[0].buttonsTitle}\n                                    access={this.state.buttons[0].access}/>\n                            <Button onClickButton={this.onClickReset.bind(this.state)}\n                                    buttonsTitle={this.state.buttons[1].buttonsTitle}\n                                    access={this.state.buttons[1].access}/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n\n// Побаловался\n// limit: {number: 0, T: 3, B: -3, error: 'Stop'}\n// onClickButton = isDone => {\n//     if (isDone) {\n//         this.state.number = this.state.limit.number;\n//\n//         if (this.state.limit.number < this.state.limit.T) {\n//             this.setState({number: this.state.number + 1});\n//             this.state.limit.number = this.state.limit.number + 1;\n//             console.log(this.state.limit.number);\n//         } else {\n//             this.setState({number: this.state.limit.error});\n//         }\n//     } else if (!isDone) {\n//         this.state.number = this.state.limit.number;\n//\n//         if (this.state.limit.number > this.state.limit.B) {\n//             this.setState({number: this.state.number - 1});\n//             this.state.limit.number = this.state.limit.number - 1;\n//             console.log(this.state.limit.number);\n//         } else {\n//             this.setState({number: this.state.limit.error});\n//         }\n//     }\n// };"]},"metadata":{},"sourceType":"module"}