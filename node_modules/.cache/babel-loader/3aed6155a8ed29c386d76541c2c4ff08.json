{"ast":null,"code":"import _objectSpread from \"/Users/itemka/Developer/Projects/Counter/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/itemka/Developer/Projects/Counter/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport Button from \"./Components/Button/Button\";\nimport ShowNumber from \"./Components/ShowNumber/ShowNumber\";\nimport InputValue from \"./Components/InputValue/InputValue\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      counter: 0,\n      buttons: [{\n        id: 1,\n        buttonsTitle: '+'\n      }, {\n        id: 2,\n        buttonsTitle: 'Reset'\n      }, {\n        id: 3,\n        buttonsTitle: 'Settings'\n      }],\n      limit: {\n        startValue: 0,\n        maxValue: 1,\n        errorColorStart: false,\n        errorColorMax: false,\n        errorEnd: false,\n        errorEndText: 'Stop'\n      }\n    };\n\n    this.onClickPlusNumber = () => {\n      if (this.state.counter < this.state.limit.maxValue) {\n        this.setState({\n          counter: this.state.counter + 1,\n          limit: _objectSpread({}, this.state.limit, {\n            errorColorStart: false,\n            errorColorMax: false,\n            errorEnd: false\n          })\n        });\n      } else if (this.state.counter === this.state.limit.maxValue) {\n        this.setState({\n          limit: _objectSpread({}, this.state.limit, {\n            errorEnd: false\n          })\n        });\n      } else if (this.state.counter >= this.state.limit.maxValue) {\n        this.setState({\n          counter: this.state.limit.errorEndText,\n          limit: _objectSpread({}, this.state.limit, {\n            errorEnd: true\n          })\n        });\n      }\n    };\n\n    this.onClickReset = () => {\n      this.setState({\n        counter: 0,\n        limit: _objectSpread({}, this.state.limit, {\n          errorColor: false,\n          errorEnd: false\n        })\n      });\n    };\n\n    this.onClickSettings = () => {\n      this.setState({\n        counter: this.state.limit.startValue\n      });\n    };\n\n    this.onChangeInputMaxValue = event => {\n      if (this.state.limit.maxValue <= this.state.limit.startValue) {\n        this.setState({\n          limit: _objectSpread({}, this.state.limit, {\n            maxValue: event\n          })\n        }, () => this.state.limiterrorColorMax = true);\n      } else {\n        this.setState({\n          limit: _objectSpread({}, this.state.limit, {\n            maxValue: event\n          })\n        }, () => this.state.limiterrorColorMax = false);\n      }\n\n      console.log(event);\n    };\n\n    this.onChangeInputStartValue = event => {\n      if (this.state.limit.startValue <= 0 || this.state.limit.startValue >= this.state.limit.maxValue) {\n        this.setState({\n          limit: _objectSpread({}, this.state.limit, {\n            startValue: event,\n            errorColorStart: true\n          })\n        });\n      } else {\n        this.setState({\n          limit: _objectSpread({}, this.state.limit, {\n            startValue: event,\n            errorColorStart: false\n          })\n        });\n      }\n\n      console.log(event);\n    };\n\n    this.render = () => {\n      return React.createElement(\"div\", {\n        className: \"generalBlock\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"bloks\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"contentLine\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, \"Max value\"), React.createElement(InputValue, {\n        errorColor: this.state.limit.errorColorMax,\n        value: this.state.limit.maxValue,\n        onChangeInput: this.onChangeInputMaxValue.bind(this.state),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"contentLine\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, \"Start value\"), React.createElement(InputValue, {\n        errorColor: this.state.limit.errorColorStart,\n        value: this.state.limit.startValue,\n        onChangeInput: this.onChangeInputStartValue.bind(this.state),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"interfaceManagement\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClickButton: this.onClickSettings.bind(this.state),\n        buttonsTitle: this.state.buttons[2].buttonsTitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      })))), React.createElement(\"div\", {\n        className: \"bloks\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(ShowNumber, {\n        limit: this.state.limit,\n        counter: this.state.counter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"interfaceManagement\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClickButton: this.onClickPlusNumber.bind(this.state),\n        buttonsTitle: this.state.buttons[0].buttonsTitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }), React.createElement(Button, {\n        onClickButton: this.onClickReset.bind(this.state),\n        buttonsTitle: this.state.buttons[1].buttonsTitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      })))));\n    };\n  }\n\n}\n\nexport default App; // Побаловался\n// limit: {number: 0, T: 3, B: -3, error: 'Stop'}\n// onClickButton = isDone => {\n//     if (isDone) {\n//         this.state.number = this.state.limit.number;\n//\n//         if (this.state.limit.number < this.state.limit.T) {\n//             this.setState({number: this.state.number + 1});\n//             this.state.limit.number = this.state.limit.number + 1;\n//             console.log(this.state.limit.number);\n//         } else {\n//             this.setState({number: this.state.limit.error});\n//         }\n//     } else if (!isDone) {\n//         this.state.number = this.state.limit.number;\n//\n//         if (this.state.limit.number > this.state.limit.B) {\n//             this.setState({number: this.state.number - 1});\n//             this.state.limit.number = this.state.limit.number - 1;\n//             console.log(this.state.limit.number);\n//         } else {\n//             this.setState({number: this.state.limit.error});\n//         }\n//     }\n// };","map":{"version":3,"sources":["/Users/itemka/Developer/Projects/Counter/src/App.js"],"names":["React","Button","ShowNumber","InputValue","App","Component","state","counter","buttons","id","buttonsTitle","limit","startValue","maxValue","errorColorStart","errorColorMax","errorEnd","errorEndText","onClickPlusNumber","setState","onClickReset","errorColor","onClickSettings","onChangeInputMaxValue","event","limiterrorColorMax","console","log","onChangeInputStartValue","render","bind"],"mappings":"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","sourcesContent":["import React from 'react'\nimport './App.css';\nimport Button from \"./Components/Button/Button\";\nimport ShowNumber from \"./Components/ShowNumber/ShowNumber\";\nimport InputValue from \"./Components/InputValue/InputValue\";\n\nclass App extends React.Component {\n\n    state = {\n        counter: 0,\n        buttons: [\n            {id: 1, buttonsTitle: '+'},\n            {id: 2, buttonsTitle: 'Reset'},\n            {id: 3, buttonsTitle: 'Settings'},\n        ],\n        limit: {\n            startValue: 0,\n            maxValue: 1,\n            errorColorStart: false,\n            errorColorMax: false,\n            errorEnd: false,\n            errorEndText: 'Stop'\n        },\n    };\n\n    onClickPlusNumber = () => {\n        if (this.state.counter < this.state.limit.maxValue) {\n\n            this.setState({\n                counter: this.state.counter + 1,\n                limit: {...this.state.limit, errorColorStart: false, errorColorMax: false, errorEnd: false}\n            })\n\n        } else if (this.state.counter === this.state.limit.maxValue) {\n\n            this.setState({limit: {...this.state.limit, errorEnd: false}})\n\n        } else if (this.state.counter >= this.state.limit.maxValue) {\n\n            this.setState({\n                counter: this.state.limit.errorEndText,\n                limit: {...this.state.limit, errorEnd: true}\n            });\n        }\n    };\n\n    onClickReset = () => {\n        this.setState({counter: 0, limit: {...this.state.limit, errorColor: false, errorEnd: false}})\n    };\n\n    onClickSettings = () => {\n        this.setState({counter: this.state.limit.startValue});\n    };\n\n\n    onChangeInputMaxValue = (event) => {\n        if (this.state.limit.maxValue <= this.state.limit.startValue) {\n            this.setState({limit: {...this.state.limit, maxValue: event}}, () => this.state.limiterrorColorMax = true);\n        } else {\n            this.setState({limit: {...this.state.limit, maxValue: event}}, () => this.state.limiterrorColorMax = false);\n        }\n        console.log(event);\n    };\n    onChangeInputStartValue = (event) => {\n        if ((this.state.limit.startValue <= 0) || (this.state.limit.startValue >= this.state.limit.maxValue)) {\n            this.setState({limit: {...this.state.limit, startValue: event, errorColorStart: true}});\n        } else {\n            this.setState({limit: {...this.state.limit, startValue: event, errorColorStart: false}});\n        }\n        console.log(event);\n    };\n\n\n    render = () => {\n        return (\n            <div className={`generalBlock`}>\n                <div className={`bloks`}>\n                    <div>\n                        <div className={`content`}>\n                            <div className={`contentLine`}>\n                                <div>Max value</div>\n                                <InputValue errorColor={this.state.limit.errorColorMax}\n                                            value={this.state.limit.maxValue}\n                                            onChangeInput={this.onChangeInputMaxValue.bind(this.state)}/>\n                            </div>\n                            <div className={`contentLine`}>\n                                <div>Start value</div>\n                                <InputValue errorColor={this.state.limit.errorColorStart}\n                                            value={this.state.limit.startValue}\n                                            onChangeInput={this.onChangeInputStartValue.bind(this.state)}/>\n                            </div>\n                        </div>\n                        <div className={`interfaceManagement`}>\n                            <Button onClickButton={this.onClickSettings.bind(this.state)}\n                                    buttonsTitle={this.state.buttons[2].buttonsTitle}/>\n                        </div>\n                    </div>\n                </div>\n                <div className={`bloks`}>\n                    <div>\n                        <div className={`content`}>\n                            <div>\n                                <ShowNumber limit={this.state.limit} counter={this.state.counter}/>\n                            </div>\n                        </div>\n                        <div className={`interfaceManagement`}>\n                            <Button onClickButton={this.onClickPlusNumber.bind(this.state)}\n                                    buttonsTitle={this.state.buttons[0].buttonsTitle}/>\n                            <Button onClickButton={this.onClickReset.bind(this.state)}\n                                    buttonsTitle={this.state.buttons[1].buttonsTitle}/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n\n// Побаловался\n// limit: {number: 0, T: 3, B: -3, error: 'Stop'}\n// onClickButton = isDone => {\n//     if (isDone) {\n//         this.state.number = this.state.limit.number;\n//\n//         if (this.state.limit.number < this.state.limit.T) {\n//             this.setState({number: this.state.number + 1});\n//             this.state.limit.number = this.state.limit.number + 1;\n//             console.log(this.state.limit.number);\n//         } else {\n//             this.setState({number: this.state.limit.error});\n//         }\n//     } else if (!isDone) {\n//         this.state.number = this.state.limit.number;\n//\n//         if (this.state.limit.number > this.state.limit.B) {\n//             this.setState({number: this.state.number - 1});\n//             this.state.limit.number = this.state.limit.number - 1;\n//             console.log(this.state.limit.number);\n//         } else {\n//             this.setState({number: this.state.limit.error});\n//         }\n//     }\n// };"]},"metadata":{},"sourceType":"module"}