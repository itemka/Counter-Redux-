{"version":3,"sources":["Components/Button/Button.jsx","Components/ShowNumber/ShowNumber.jsx","Components/InputValue/InputValue.jsx","Redux/CounterReducer.js","App.js","serviceWorker.js","index.js","Components/Button/Button.module.css","Components/ShowNumber/ShowNumber.module.css","Components/InputValue/InputValue.module.css"],"names":["Button","props","disabledButtonCSS","access","concat","css","disabledButton","react_default","a","createElement","Fragment","className","buttons","onClick","onClickButton","disabled","buttonsTitle","ShowNumber","styleNumber","limit","errorEnd","colorNumberEnd","colorNumberOk","message","InputValue","errorColor","backgroundError","type","value","inputValue","onChange","event","onChangeInput","currentTarget","accessButtons","id","map","item","initialState","counter","buttonPlus","buttonReset","buttonSet","startValue","maxValue","errorColorStart","errorColorMax","messageAccess","messageError","CounterReducer","state","arguments","length","undefined","action","Object","objectSpread","button","App","render","Components_InputValue_InputValue","_this","inputMaxValue","inputStartValue","Components_Button_Button","set","Components_ShowNumber_ShowNumber","plusNumber","reset","React","Component","ConnectedApp","connect","Boolean","window","location","hostname","match","CombineReducers","combineReducers","store","createStore","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","mousDown"],"mappings":"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","file":"static/js/main.1634b416.chunk.js","sourcesContent":["import React from 'react';\nimport css from './Button.module.css';\n\nconst Button = props => {\n    // let state = {\n    //     mouseDown: false,\n    // };\n    // let onMouseDown=(event)=>{\n    //     if (event.onmousedown){\n    //         state.mouseDown = true;\n    //     }\n    //     else{\n    //         state.mouseDown = false;\n    //     }\n    // };\n\n    let disabledButtonCSS = props.access === false ? `${css.disabledButton}` : ``;\n    let disabledButton = props.access === false ? `disabled` : ``;\n    // let mouseDown = state.mouseDown === false ? `` : `${css.mousDown}`;\n\n    return (\n        <>\n            <button className={`${css.buttons} ${disabledButtonCSS}`}\n                    onClick={() => props.onClickButton()} disabled={disabledButton}>\n                {props.buttonsTitle}\n            </button>\n        </>\n    );\n};\n\nexport default Button;","import React from 'react'\nimport css from './ShowNumber.module.css';\n\nconst ShowNumber = props => {\n    let styleNumber = props.limit.errorEnd === true ? `${css.colorNumberEnd}` : `${css.colorNumberOk}`;\n    return (\n        <div className={`${styleNumber}`}>\n            {props.message}\n        </div>\n    );\n};\n\nexport default ShowNumber;","import React from 'react';\nimport css from './InputValue.module.css';\n\nconst InputValue = props => {\n    let errorColor = props.errorColor === true ? `${css.backgroundError}` : ``;\n    return (\n        <>\n            <input type={`number`} value={props.value} className={`${css.inputValue} ${errorColor}`}\n                   onChange={event => props.onChangeInput(+event.currentTarget.value)}/>\n        </>\n    );\n};\n\nexport default InputValue;","const PLUS_NUMBER = `PLUS_NUMBER`;\nconst RESET = `RESET`;\nconst SET = `SET`;\nconst INPUT_MAX_VALUE = `INPUT_MAX_VALUE`;\nconst INPUT_START_VALUE = `INPUT_START_VALUE`;\n\nexport const plusNumber = () => ({type: PLUS_NUMBER});\nexport const reset = () => ({type: RESET});\nexport const set = () => ({type: SET});\nexport const inputMaxValue = event => ({type: INPUT_MAX_VALUE, event: event});\nexport const inputStartValue = event => ({type: INPUT_START_VALUE, event: event});\n\nlet accessButtons = (buttons, id, access) => {\n    let b = buttons.map(item => {\n        if (item.id === 3) {\n            item.access = access;\n            return item;\n        } else {\n            item.access = !access;\n            return item;\n        }\n    });\n    return b;\n};\n\nconst initialState = {\n    counter: 0,\n    buttonPlus: {id: 1, buttonsTitle: '+', access: true},\n    buttonReset: {id: 2, buttonsTitle: 'Reset', access: true},\n    buttonSet: {id: 3, buttonsTitle: 'Set', access: false},\n    buttons: [\n        {id: 1, buttonsTitle: '+', access: true},\n        {id: 2, buttonsTitle: 'Reset', access: true},\n        {id: 3, buttonsTitle: 'Set', access: false},\n    ],\n    limit: {\n        startValue: 0, maxValue: 5,\n        errorColorStart: false, errorColorMax: false,\n        errorEnd: false,\n    },\n    message: 0,\n    messageAccess: \"Enter values and press 'Set'\",\n    messageError: \"Incorrect value!\"\n};\n\nconst CounterReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case PLUS_NUMBER: {\n            if (state.counter < state.limit.maxValue) {\n                if (state.counter < state.limit.maxValue - 1) {\n                    return {\n                        ...state,\n                        button: state.buttons.map(item=>({...item})),\n                        // buttonPlus: {...state.buttonPlus},\n                        // buttonReset: {...state.buttonReset},\n                        // buttonSet: {...state.buttonSet},\n                        counter: state.counter + 1,\n                        message: state.message + 1,\n                        limit: {...state.limit, errorColorStart: false, errorColorMax: false, errorEnd: false}\n                    }\n                } else {\n                    return {\n                        ...state,\n                        button: state.buttons.map(item=>({...item})),\n                        // buttonPlus: {...state.buttonPlus},\n                        // buttonReset: {...state.buttonReset},\n                        // buttonSet: {...state.buttonSet},\n                        counter: state.counter + 1,\n                        message: state.message + 1,\n                        limit: {...state.limit, errorEnd: true}\n                    }\n                }\n            } else {\n                return {\n                    ...state,\n                    button: state.buttons.map(item=>({...item})),\n                    // buttonPlus: {...state.buttonPlus},\n                    // buttonReset: {...state.buttonReset},\n                    // buttonSet: {...state.buttonSet},\n                    limit: {...state.limit, errorEnd: true}\n                }\n            }\n        }\n        case RESET: {\n            return {\n                ...state,\n                button: state.buttons.map(item=>({...item})),\n                // buttonPlus: {...state.buttonPlus},\n                // buttonReset: {...state.buttonReset},\n                // buttonSet: {...state.buttonSet},\n                counter: state.limit.startValue,\n                message: state.limit.startValue,\n                limit: {...state.limit, errorEnd: false},\n            }\n        }\n        case SET: {\n            if (state.limit.maxValue > state.limit.startValue && state.limit.startValue >= 0) {\n                return {\n                    ...state,\n                    counter: state.limit.startValue,\n                    message: state.limit.startValue,\n                    buttons: accessButtons(state.buttons, 3, false),\n                    // buttonPlus: {...state.buttonPlus, access: true},\n                    // buttonReset: {...state.buttonReset, access: true},\n                    // buttonSet: {...state.buttonSet, access: false},\n                    limit: {...state.limit, errorEnd: false}\n                }\n            }\n        }\n        case INPUT_MAX_VALUE: {\n            if (action.event > state.limit.startValue) {\n                return {\n                    ...state,\n                    buttons: accessButtons(state.buttons, 3, true),\n                    // buttonPlus: {...state.buttonPlus, access: false},\n                    // buttonReset: {...state.buttonReset, access: false},\n                    // buttonSet: {...state.buttonSet, access: true},\n                    limit: {...state.limit, maxValue: action.event, errorColorMax: false, errorEnd: false},\n                    message: state.messageAccess,\n                }\n            } else {\n                return {\n                    ...state,\n                    buttons: accessButtons(state.buttons, 3, true),\n                    // buttonPlus: {...state.buttonPlus, access: false},\n                    // buttonReset: {...state.buttonReset, access: false},\n                    // buttonSet: {...state.buttonSet, access: true},\n                    limit: {...state.limit, maxValue: action.event, errorColorMax: true, errorEnd: false},\n                    message: state.messageError,\n                }\n            }\n        }\n        case INPUT_START_VALUE: {\n            if ((action.event >= 0) && (action.event < state.limit.maxValue)) {\n                return {\n                    ...state,\n                    buttons: accessButtons(state.buttons, 3, true),\n                    // buttonPlus: {...state.buttonPlus, access: false},\n                    // buttonReset: {...state.buttonReset, access: false},\n                    // buttonSet: {...state.buttonSet, access: true},\n                    limit: {...state.limit, startValue: action.event, errorColorStart: false, errorEnd: false},\n                    message: state.messageAccess,\n                }\n            } else if ((action.event < 0) || (action.event >= state.limit.maxValue)) {\n                return {\n                    ...state,\n                    buttons: accessButtons(state.buttons, 3, true),\n                    // buttonPlus: {...state.buttonPlus, access: false},\n                    // buttonReset: {...state.buttonReset, access: false},\n                    // buttonSet: {...state.buttonSet, access: true},\n                    limit: {...state.limit, startValue: action.event, errorColorStart: true, errorEnd: false},\n                    message: state.messageError,\n                }\n            }\n        }\n        default: {\n            return state;\n        }\n    }\n};\n\nexport default CounterReducer;\n","import React from 'react'\nimport './App.css';\nimport Button from \"./Components/Button/Button\";\nimport ShowNumber from \"./Components/ShowNumber/ShowNumber\";\nimport InputValue from \"./Components/InputValue/InputValue\";\nimport {connect} from \"react-redux\";\nimport {inputMaxValue, inputStartValue, plusNumber, reset, set} from \"./Redux/CounterReducer\";\n\nclass App extends React.Component {\n    render = () => {\n        return (\n            <div className={`generalBlock`}>\n                <div className={`bloks`}>\n                    <div>\n                        <div className={`content`}>\n                            <div className={`contentLine`}>\n                                <div>Max value</div>\n                                <InputValue errorColor={this.props.errorColorMax}\n                                            value={this.props.maxValue}\n                                            onChangeInput={this.props.inputMaxValue}/>\n                            </div>\n                            <div className={`contentLine`}>\n                                <div>Start value</div>\n                                <InputValue errorColor={this.props.errorColorStart}\n                                            value={this.props.startValue}\n                                            onChangeInput={this.props.inputStartValue}/>\n                            </div>\n                        </div>\n                        <div className={`interfaceManagement`}>\n                            <Button onClickButton={this.props.set}\n                                    // buttonsTitle={this.props.buttonSet.buttonsTitle}\n                                    // access={this.props.buttonSet.access}\n                                    buttonsTitle={this.props.buttons[2].buttonsTitle}\n                                    access={this.props.buttons[2].access}\n                            />\n                        </div>\n                    </div>\n                </div>\n                <div className={`bloks`}>\n                    <div>\n                        <div className={`content`}>\n                            <div>\n                                <ShowNumber limit={this.props.limit} message={this.props.message}/>\n                            </div>\n                        </div>\n                        <div className={`interfaceManagement`}>\n                            <Button onClickButton={this.props.plusNumber}\n                                    // buttonsTitle={this.props.buttonPlus.buttonsTitle}\n                                    // access={this.props.buttonPlus.access}\n                                    buttonsTitle={this.props.buttons[0].buttonsTitle}\n                                    access={this.props.buttons[0].access}\n                            />\n                            <Button onClickButton={this.props.reset}\n                                    // buttonsTitle={this.props.buttonReset.buttonsTitle}\n                                    // access={this.props.buttonReset.access}\n                                    buttonsTitle={this.props.buttons[1].buttonsTitle}\n                                    access={this.props.buttons[1].access}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        errorColorMax: state.CounterReducer.limit.errorColorMax,\n        errorColorStart: state.CounterReducer.limit.errorColorStart,\n        maxValue: state.CounterReducer.limit.maxValue,\n        startValue: state.CounterReducer.limit.startValue,\n        // buttonPlus: state.CounterReducer.buttonPlus,\n        // buttonReset: state.CounterReducer.buttonReset,\n        // buttonSet: state.CounterReducer.buttonSet,\n        limit: state.CounterReducer.limit,\n        message: state.CounterReducer.message,\n        buttons: state.CounterReducer.buttons,\n    }\n};\n\nconst ConnectedApp = connect(mapStateToProps, {inputMaxValue, inputStartValue, plusNumber, reset, set})(App);\nexport default ConnectedApp;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {combineReducers, createStore} from \"redux\";\nimport CounterReducer from './Redux/CounterReducer';\nimport {Provider} from \"react-redux\";\n\nconst CombineReducers = combineReducers({\n    CounterReducer: CounterReducer,\n});\nconst store = createStore(CombineReducers);\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"Button_buttons__3yrg6\",\"disabledButton\":\"Button_disabledButton__1Tmh8\",\"mousDown\":\"Button_mousDown__3sjvu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"colorNumberEnd\":\"ShowNumber_colorNumberEnd__qFYkM\",\"colorNumberOk\":\"ShowNumber_colorNumberOk__bJJF_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputValue\":\"InputValue_inputValue__2rlCZ\",\"backgroundError\":\"InputValue_backgroundError__RAU8h\"};"],"sourceRoot":""}